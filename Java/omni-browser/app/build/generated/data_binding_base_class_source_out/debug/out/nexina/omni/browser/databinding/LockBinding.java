// Generated by view binder compiler. Do not edit!
package nexina.omni.browser.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nexina.omni.browser.R;

public final class LockBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button changeLock;

  @NonNull
  public final EditText confirmPassInput;

  @NonNull
  public final Button createLock;

  @NonNull
  public final Button enterPass;

  @NonNull
  public final EditText enterPassInput;

  @NonNull
  public final LinearLayout linear3;

  @NonNull
  public final LinearLayout linear4;

  @NonNull
  public final LinearLayout linear5;

  @NonNull
  public final LinearLayout linear7;

  @NonNull
  public final LinearLayout linearBg;

  @NonNull
  public final LinearLayout linearContent;

  @NonNull
  public final EditText newPassInput;

  @NonNull
  public final Button resetLock;

  @NonNull
  public final TextView textview1;

  private LockBinding(@NonNull LinearLayout rootView, @NonNull Button changeLock,
      @NonNull EditText confirmPassInput, @NonNull Button createLock, @NonNull Button enterPass,
      @NonNull EditText enterPassInput, @NonNull LinearLayout linear3,
      @NonNull LinearLayout linear4, @NonNull LinearLayout linear5, @NonNull LinearLayout linear7,
      @NonNull LinearLayout linearBg, @NonNull LinearLayout linearContent,
      @NonNull EditText newPassInput, @NonNull Button resetLock, @NonNull TextView textview1) {
    this.rootView = rootView;
    this.changeLock = changeLock;
    this.confirmPassInput = confirmPassInput;
    this.createLock = createLock;
    this.enterPass = enterPass;
    this.enterPassInput = enterPassInput;
    this.linear3 = linear3;
    this.linear4 = linear4;
    this.linear5 = linear5;
    this.linear7 = linear7;
    this.linearBg = linearBg;
    this.linearContent = linearContent;
    this.newPassInput = newPassInput;
    this.resetLock = resetLock;
    this.textview1 = textview1;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LockBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LockBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.lock, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LockBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.change_lock;
      Button changeLock = ViewBindings.findChildViewById(rootView, id);
      if (changeLock == null) {
        break missingId;
      }

      id = R.id.confirm_pass_input;
      EditText confirmPassInput = ViewBindings.findChildViewById(rootView, id);
      if (confirmPassInput == null) {
        break missingId;
      }

      id = R.id.create_lock;
      Button createLock = ViewBindings.findChildViewById(rootView, id);
      if (createLock == null) {
        break missingId;
      }

      id = R.id.enter_pass;
      Button enterPass = ViewBindings.findChildViewById(rootView, id);
      if (enterPass == null) {
        break missingId;
      }

      id = R.id.enter_pass_input;
      EditText enterPassInput = ViewBindings.findChildViewById(rootView, id);
      if (enterPassInput == null) {
        break missingId;
      }

      id = R.id.linear3;
      LinearLayout linear3 = ViewBindings.findChildViewById(rootView, id);
      if (linear3 == null) {
        break missingId;
      }

      id = R.id.linear4;
      LinearLayout linear4 = ViewBindings.findChildViewById(rootView, id);
      if (linear4 == null) {
        break missingId;
      }

      id = R.id.linear5;
      LinearLayout linear5 = ViewBindings.findChildViewById(rootView, id);
      if (linear5 == null) {
        break missingId;
      }

      id = R.id.linear7;
      LinearLayout linear7 = ViewBindings.findChildViewById(rootView, id);
      if (linear7 == null) {
        break missingId;
      }

      id = R.id.linear_bg;
      LinearLayout linearBg = ViewBindings.findChildViewById(rootView, id);
      if (linearBg == null) {
        break missingId;
      }

      id = R.id.linear_content;
      LinearLayout linearContent = ViewBindings.findChildViewById(rootView, id);
      if (linearContent == null) {
        break missingId;
      }

      id = R.id.new_pass_input;
      EditText newPassInput = ViewBindings.findChildViewById(rootView, id);
      if (newPassInput == null) {
        break missingId;
      }

      id = R.id.reset_lock;
      Button resetLock = ViewBindings.findChildViewById(rootView, id);
      if (resetLock == null) {
        break missingId;
      }

      id = R.id.textview1;
      TextView textview1 = ViewBindings.findChildViewById(rootView, id);
      if (textview1 == null) {
        break missingId;
      }

      return new LockBinding((LinearLayout) rootView, changeLock, confirmPassInput, createLock,
          enterPass, enterPassInput, linear3, linear4, linear5, linear7, linearBg, linearContent,
          newPassInput, resetLock, textview1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
